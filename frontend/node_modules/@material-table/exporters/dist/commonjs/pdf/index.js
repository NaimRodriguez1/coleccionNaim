"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportPdf = void 0;
const jspdf_1 = __importDefault(require("jspdf"));
require("jspdf-autotable");
function ExportPdf(columns, data = [], filename = "data") {
    try {
        if (jspdf_1.default === null)
            throw new Error("jspdf-autotable not found");
        let finalData = data; // Grab first item for data array, make sure it is also an array.
        // If it is an object, 'flatten' it into an array of strings.
        if (data.length && !Array.isArray(data[0])) {
            if (typeof data[0] === "object") {
                // Turn data into an array of string arrays, without the `tableData` prop
                finalData = data.map((row) => columns.map((col) => col.exportTransformer
                    ? col.exportTransformer(row)
                    : row[col.field]));
            }
        }
        const content = {
            startY: 50,
            head: [columns.map((col) => col.title)],
            body: finalData,
        };
        const unit = "pt";
        const size = "A4";
        const orientation = "landscape";
        const doc = new jspdf_1.default(orientation, unit, size);
        doc.setFontSize(15);
        doc.text(filename, 40, 40);
        doc.autoTable(content);
        doc.save(filename + ".pdf");
    }
    catch (err) {
        console.error(`exporting pdf : unable to import 'jspdf-autotable' : ${err}`);
    }
}
exports.ExportPdf = ExportPdf;
//# sourceMappingURL=index.js.map