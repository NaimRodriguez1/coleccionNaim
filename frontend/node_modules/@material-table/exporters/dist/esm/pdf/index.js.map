{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/pdf/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,iBAAiB,CAAC;AAGzB,MAAM,UAAU,SAAS,CACvB,OAAyB,EACzB,OAAiB,EAAE,EACnB,QAAQ,GAAG,MAAM;IAEjB,IAAI;QACF,IAAI,KAAK,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACjE,IAAI,SAAS,GAAG,IAAI,CAAC,CAAC,iEAAiE;QACvF,6DAA6D;QAE7D,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1C,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC/B,yEAAyE;gBACzE,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAC3B,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAClB,GAAG,CAAC,iBAAiB;oBACnB,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC;oBAC5B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAyB,CAAC,CACvC,CACkB,CAAC;aACvB;SACF;QAED,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,EAAE,SAAS;SAChB,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,WAAW,GAAG,WAAW,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAE5C,CAAC;QACF,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACpB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3B,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvB,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;KAC7B;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,CAAC,KAAK,CACX,wDAAwD,GAAG,EAAE,CAC9D,CAAC;KACH;AACH,CAAC","sourcesContent":["import JSpdf from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { Column } from \"@material-table/core\";\n\nexport function ExportPdf<T extends object>(\n  columns: Array<Column<T>>,\n  data: Array<T> = [],\n  filename = \"data\"\n) {\n  try {\n    if (JSpdf === null) throw new Error(\"jspdf-autotable not found\");\n    let finalData = data; // Grab first item for data array, make sure it is also an array.\n    // If it is an object, 'flatten' it into an array of strings.\n\n    if (data.length && !Array.isArray(data[0])) {\n      if (typeof data[0] === \"object\") {\n        // Turn data into an array of string arrays, without the `tableData` prop\n        finalData = data.map((row) =>\n          columns.map((col) =>\n            col.exportTransformer\n              ? col.exportTransformer(row)\n              : row[col.field as keyof typeof row]\n          )\n        ) as typeof finalData;\n      }\n    }\n\n    const content = {\n      startY: 50,\n      head: [columns.map((col) => col.title)],\n      body: finalData,\n    };\n    const unit = \"pt\";\n    const size = \"A4\";\n    const orientation = \"landscape\";\n    const doc = new JSpdf(orientation, unit, size) as JSpdf & {\n      autoTable: (content: object) => void;\n    };\n    doc.setFontSize(15);\n    doc.text(filename, 40, 40);\n    doc.autoTable(content);\n    doc.save(filename + \".pdf\");\n  } catch (err) {\n    console.error(\n      `exporting pdf : unable to import 'jspdf-autotable' : ${err}`\n    );\n  }\n}\n"]}